Here is the updated DocumentManagerBean class that will run on Liberty server in IBM Cloud. 
*********************************************************************************************
package org.apache.geronimo.samples.document.ejb;

import java.util.List;

import javax.ejb.Stateless;
import javax.ejb.TransactionManagement;
import javax.ejb.TransactionManagementType;

import org.apache.geronimo.samples.document.dao.DocumentManagerDAO;
import org.apache.geronimo.samples.document.hibernate.UserFile;

@Stateless
// BMT
@TransactionManagement(value=TransactionManagementType.BEAN)
public class DocumentManagerBean {
	
	public String upload(String userId, String filename) {
		addUserFile(userId, filename);
		return "File successfully uploaded";
	}

	 public List<UserFile> getFilesByUserid(String userid) {
		 List<UserFile> list = null;
		 try {
			DocumentManagerDAO dmDao = new DocumentManagerDAO();
			list = dmDao.getUserFilesByUserid(userid);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		   return list;
	   }
	 private void addUserFile(String userId, String filename) {
		 DocumentManagerDAO dmDao;
		 
		try {
			dmDao = new DocumentManagerDAO();
			dmDao.addUserFile(userId, filename);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	 }
}
************************************************************************************************************

Here is the updated DocumentManagerDAO class that will run on Liberty server in IBM Cloud. 
*********************************************************************************************
package org.apache.geronimo.samples.document.dao;

import java.sql.Timestamp;
import java.util.List;

import org.apache.geronimo.samples.document.hibernate.UserFile;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;

public class DocumentManagerDAO {

	SessionFactory factory  = null;
	Session session = null;
	static int id = 1000;
	
	public DocumentManagerDAO() throws Exception {

		factory  = new Configuration().configure("hibernate.cfg.xml").buildSessionFactory();

	}

	@SuppressWarnings("unchecked")
	public List<UserFile> getUserFilesByUserid(String userid) throws Exception {

		// CMT
//		session = factory.getCurrentSession();
		// BMT
		session = factory.openSession();
		
		Query q = session.createQuery("from UserFile f where f.userid=:userid");
		q.setString("userid", userid);
		return q.list();

	}


	@SuppressWarnings("unchecked")
	public List<UserFile> getUserFiles() throws Exception {

		// CMT
//		session = factory.getCurrentSession();
		// BMT
		session = factory.openSession();

		Query q = session.createQuery("from UserFile");
		return q.list();

	}

	public boolean addUserFile(String userId, String filename)
			throws Exception {

		if(userId == null || userId.isEmpty() || filename == null || filename.isEmpty()){
			return false;
		}
		
		// CMT
//		session = factory.getCurrentSession();
		// BMT
		session = factory.openSession();
		
		long curTime = System.currentTimeMillis();
		
		Timestamp timestamp = new Timestamp(curTime);
		
		UserFile userfile = new UserFile(userId, filename, timestamp);

		// CMT
//		session.save(userfile);
		// BMT
		Transaction tx;
		tx = session.beginTransaction();
		session.save(userfile);
		tx.commit();
		
		return true;

	}

	public void remove() throws Exception {

	}

}
************************************************************************************************************

Here is the updated RetrieveServlet class that will that will run on Liberty server in IBM Cloud.
************************************************************************************************************
package org.apache.geronimo.samples.document.web;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.List;

import javax.ejb.EJB;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.geronimo.samples.document.ejb.DocumentManagerBean;
import org.apache.geronimo.samples.document.hibernate.UserFile;

@WebServlet({"/RetrieveServlet"})
public class RetrieveServlet extends HttpServlet{

	private static final long serialVersionUID = -2773446199481416101L;
	@EJB
	private DocumentManagerBean docManager;
	
	protected void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
		PrintWriter out = res.getWriter();
		String userid = req.getUserPrincipal().getName();
		List<UserFile> docs = docManager.getFilesByUserid(userid);
		if (docs != null) {
			for (int i = 0; i < docs.size(); ++i) {
				out.append("<TR>");
				out.append("<TD>" + i + "</TD>");
				out.append("<TD>" + docs.get(i).getFilename() + "</TD>");
				out.append("<TD>" + docs.get(i).getTimestamp().toString() + "</TD>");
				out.append("</TR>");
			}
		}
		out.append("</TBODY>");
		out.append("</TABLE>");

		req.setAttribute("Doclist", out);
	}
	

	protected void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
		doGet(req, res);
	}
	
}
****************************************************************************************************************

Here is the updated UploadServlet class that will run on Liberty server in IBM Cloud.
****************************************************************************************************************
package org.apache.geronimo.samples.document.web;

import java.io.IOException;

import javax.ejb.EJB;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.geronimo.samples.document.ejb.DocumentManagerBean;

@WebServlet({"/UploadServlet"})
public class UploadServlet extends HttpServlet{

	private static final long serialVersionUID = -2773446199481416101L;
	@EJB
	private DocumentManagerBean docManager;
	
	protected void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
		String filename = req.getParameter("file");
		String userID = req.getUserPrincipal().getName();
		req.setAttribute("result", docManager.upload(userID, filename));
		req.getRequestDispatcher("jsp/main.jsp").forward(req, res);
	}

	protected void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
		doGet(req, res);
	}
	
}
****************************************************************************************************************
Here is the updated server.xml that will run on Liberty server in IBM Cloud.
****************************************************************************************************************
<server description="new server">

    <!-- Enable features -->
    <featureManager>
        <feature>javaee-7.0</feature>
        <feature>ejbLite-3.2</feature>
        <feature>appSecurity-2.0</feature>
        <feature>servlet-3.1</feature>
        <feature>jsp-2.3</feature>
        <feature>jdbc-4.1</feature>
        <feature>localConnector-1.0</feature>
    </featureManager>

	<!-- This template enables security. To get the full use of all the capabilities, a keystore and user registry are required. -->
	
	<!-- For the keystore, default keys are generated and stored in a keystore. To provide the keystore password, generate an 
	     encoded password using bin/securityUtility encode and add it below in the password attribute of the keyStore element. 
	     Then uncomment the keyStore element. -->
	<!--
	<keyStore password=""/> 
	-->
	
	<!--For a user registry configuration, configure your user registry. For example, configure a basic user registry using the
	    basicRegistry element. Specify your own user name below in the name attribute of the user element. For the password, 
	    generate an encoded password using bin/securityUtility encode and add it in the password attribute of the user element. 
	    Then uncomment the user element. -->
	<basicRegistry id="basic" realm="BasicRealm"> 
		<!-- <user name="yourUserName" password="" />  --> 
	</basicRegistry>
    
    <!-- To access this server from a remote client add a host attribute to the following element, e.g. host="*" -->
    <httpEndpoint httpPort="9080" httpsPort="9443" id="defaultHttpEndpoint"/>
                  
    <!-- Automatically expand WAR files and EAR files -->
	<applicationManager autoExpand="false"/>

    <keyStore id="defaultKeyStore" password="{xor}MzY9Oi0rJg=="/>

    <basicRegistry id="basic" realm="BasicRealm">
        <user name="user" password="1"/>
        <user name="editor" password="2"/>
        <group name="authenticated">
        	<member name="user"/>
        	<member name="editor"/>
        </group>
        <group name="uploader">
        	<member name="editor"/>
        </group>
    </basicRegistry>
    
    <application type="ear" id="DocumentManager" name="DocumentManager" location="${server.config.dir}/apps/DocumentManager.ear" >
		<application-bnd>
			<security-role name="authenticated">
				<special-subject type="ALL_AUTHENTICATED_USERS" />
			</security-role>
			<security-role name="uploader">
				<group name="uploader" />
			</security-role>
		</application-bnd>
	</application>

	<library id="MySQLDriverLib">
		<fileset id='mysql-fileset' dir='${server.config.dir}/lib' />
	</library>
	<dataSource id="DefaultDataSource" type="javax.sql.ConnectionPoolDataSource" transactional="true">
		<jdbcDriver libraryRef="MySQLDriverLib"/>
		<properties
			id='mysql-mydb-props'
			databaseName='ic16_lab2434'
			user='root'
			password='object00'
			portNumber='3306'
			serverName='localhost'
		/>
		<connectionManager
			id='mysql-mydb-conMgr'
			maxPoolSize='10'
		/>
    </dataSource>

</server>
****************************************************************************************************************
Here is the updated hibernate.cfg.xml that will run on Liberty server in IBM Cloud.
****************************************************************************************************************
<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<!DOCTYPE hibernate-configuration PUBLIC
	"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
	"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
	
<!--Migration from hibernate.cfg.xml to persistence.xml is finished. A new persistence.xml file was generated in the same location as this hibernate.cfg.xml file.-->
<!--$ANALYSIS-IGNORE, QUICKFIX APPLIED-->
<hibernate-configuration>
    <session-factory>
        <!-- properties from hibernate-service.xml -->
        <property name="connection.datasource">java:comp/DefaultDataSource</property>
        <property name="dialect">org.hibernate.dialect.MySQLDialect</property>
        <property name="cache.provider_class">org.hibernate.cache.HashtableCacheProvider</property>
        <property name="show_sql">true</property>
        <!--  will use JDBCTransactionFactory by default -->
        <property name="transaction.factory_class">org.hibernate.transaction.JTATransactionFactory</property>
        <property name="transaction.manager_lookup_class">org.hibernate.transaction.WebSphereExtendedJTATransactionLookup</property>
        <property name="jta.UserTransaction">java:comp/UserTransaction</property>
        <!-- mapping files -->
        <mapping resource="Files.hbm.xml"/>
    </session-factory>
</hibernate-configuration>
****************************************************************************************************************
